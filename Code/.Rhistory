atp18.co <- atp18.co[ind.atp18]
atp18.cooaf <- atp18.cooaf[ind.atp18]
wta22.basic <- readRDS("../Results/Individual/t_wta22_basic")
wta22.oaf <- readRDS("../Results/Individual/t_wta22_oaf")
wta22.h2h <- readRDS("../Results/Individual/t_wta22_h2h")
wta22.co <- readRDS("../Results/Individual/t_wta22_co")
wta22.cooaf <- readRDS("../Results/Individual/t_wta22_co(oaf)")
wta22.basic <- wta22.basic[ind.wta22]
wta22.oaf <- wta22.oaf[ind.wta22]
wta22.h2h <- wta22.h2h[ind.wta22]
wta22.co <- wta22.co[ind.wta22]
wta22.cooaf <- wta22.cooaf[ind.wta22]
atp22.basic <- readRDS("../Results/Individual/t_atp22_basic")
atp22.oaf <- readRDS("../Results/Individual/t_atp22_oaf")
atp22.h2h <- readRDS("../Results/Individual/t_atp22_h2h")
atp22.co <- readRDS("../Results/Individual/t_atp22_co")
atp22.cooaf <- readRDS("../Results/Individual/t_atp22_co(oaf)")
atp22.basic <- atp22.basic[ind.atp22]
atp22.oaf <- atp22.oaf[ind.atp22]
atp22.h2h <- atp22.h2h[ind.atp22]
atp22.co <- atp22.co[ind.atp22]
atp22.cooaf <- atp22.cooaf[ind.atp22]
atp14.psu <- readRDS("../Results/Individual/t_atp14_psu_accuracy")
atp14.psu <- atp14.psu[ind.atp14]
wta18.psu <- readRDS("../Results/Individual/t_wta18_psu_accuracy")
wta18.psu <- wta18.psu[ind.wta18]
atp18.psu <- readRDS("../Results/Individual/t_atp18_psu_accuracy")
atp18.psu <- atp18.psu[ind.atp18]
wta22.psu <- readRDS("../Results/Individual/t_wta22_psu_accuracy")
wta22.psu <- wta22.psu[ind.wta22]
atp22.psu <- readRDS("../Results/Individual/t_atp22_psu_accuracy")
atp22.psu <- atp22.psu[ind.atp22]
atp14.psd <- readRDS("../Results/Individual/t_atp14_psd_accuracy")
atp14.psd <- atp14.psd[ind.atp14]
wta18.psd <- readRDS("../Results/Individual/t_wta18_psd_accuracy")
wta18.psd <- wta18.psd[ind.wta18]
atp18.psd <- readRDS("../Results/Individual/t_atp18_psd_accuracy")
atp18.psd <- atp18.psd[ind.atp18]
wta22.psd <- readRDS("../Results/Individual/t_wta22_psd_accuracy")
wta22.psd <- wta22.psd[ind.wta22]
atp22.psd <- readRDS("../Results/Individual/t_atp22_psd_accuracy")
atp22.psd <- atp22.psd[ind.atp22]
# column order of df's must be in order of tags below
tag <- c("H2H","CO","OAF","CO(OAF)","PSU","PSD")
atp14.df <- data.frame(cbind(atp14.h2h,atp14.co,atp14.oaf,
atp14.cooaf,atp14.psu,atp14.psd))
colnames(atp14.df) <- tag
atp18.df <- data.frame(cbind(atp18.h2h,atp18.co,atp18.oaf,
atp18.cooaf,atp18.psu,atp18.psd))
colnames(atp18.df) <- tag
wta18.df <- data.frame(cbind(wta18.h2h,wta18.co,wta18.oaf,
wta18.cooaf,wta18.psu,wta18.psd))
colnames(wta18.df) <- tag
atp22.df <- data.frame(cbind(atp22.h2h,atp22.co,atp22.oaf,
atp22.cooaf,atp22.psu,atp22.psd))
colnames(atp22.df) <- tag
wta22.df <- data.frame(cbind(wta22.h2h,wta22.co,wta22.oaf,
wta22.cooaf,wta22.psu,wta22.psd))
colnames(wta22.df) <- tag
averages <- function(...){
if (is.list(c(...))) {
x <- c(...)
} else {
x <- list(...)
}
n <- length(x) # number of components
res <- c()
N <- length(x[[1]]) # length of one component
for (i in 1:N){
n.cov <- n # to change according to which methods have coverage
sum <- 0
for (j in 1:n){
if (x[[j]][i]<0) {
n.cov <- n.cov-1
next
}
sum <- sum+x[[j]][i]
}
res <- c(res,sum/n.cov)
}
return(res)
}
ensemble.results <- function(df,df.id,approach,sep="+"){
# df one of the 6 dataframes - "atp/wta"+"14/18/22" below
# df.id is for the comparison vectors
# atp14: 1, wta18: 2, atp18: 3, wta22: 4, atp22: 5
if (df.id==1){
basic.comp <- atp14.basic
test <- atp14.test$minutes
} else if (df.id==2) {
basic.comp <- wta18.basic
test <- wta18.test$minutes
} else if (df.id==3) {
basic.comp <- atp18.basic
test <- atp18.test$minutes
} else if (df.id==4) {
basic.comp <- wta22.basic
test <- wta22.test$minutes
} else if (df.id==5) {
basic.comp <- atp22.basic
test <- atp22.test$minutes
}
res <- data.frame(matrix(0,nrow=57,ncol=3)) # nrow=57=6c2+6c3+6c4+6c5+6c6
colnames(res) <- c("score","p-value","coverage")
row.idx <- 1
# 6c2
for (i in 1:5){
for (j in (i+1):6){
ens <- approach(df[,i],df[,j])
sqr.err <- (test-ens)^2
sqr.err <- sqr.err[which(!is.na(sqr.err))]
res[row.idx,1] <- sqrt(mean(sqr.err))
res[row.idx,2] <- t.test((test-basic.comp)^2,sqr.err,
var.equal=TRUE,alternative="greater")$p.value
res[row.idx,3] <- length(sqr.err)
rownames(res)[row.idx] <- paste(tag[i],tag[j],sep=sep)
row.idx <- row.idx+1
}
}
# 6c3
for (i in 1:4){
for (j in (i+1):5){
for (k in (j+1):6){
ens <- approach(df[,i],df[,j],df[,k])
sqr.err <- (test-ens)^2
sqr.err <- sqr.err[which(!is.na(sqr.err))]
res[row.idx,1] <- sqrt(mean(sqr.err))
res[row.idx,2] <- t.test((test-basic.comp)^2,sqr.err,
var.equal=TRUE,alternative="greater")$p.value
res[row.idx,3] <- length(sqr.err)
rownames(res)[row.idx] <- paste(tag[i],tag[j],tag[k],sep=sep)
row.idx <- row.idx+1
}
}
}
# 6c4
for (i in 1:5){
for (j in (i+1):6){
ens <- approach(as.list(df[,-c(i,j)]))
sqr.err <- (test-ens)^2
sqr.err <- sqr.err[which(!is.na(sqr.err))]
res[row.idx,1] <- sqrt(mean(sqr.err))
res[row.idx,2] <- t.test((test-basic.comp)^2,sqr.err,
var.equal=TRUE,alternative="greater")$p.value
res[row.idx,3] <- length(sqr.err)
rownames(res)[row.idx] <- paste(tag[-c(i,j)],collapse=sep)
row.idx <- row.idx+1
}
}
# 6c5
for (i in 1:6){
ens <- approach(as.list(df[,-c(i)]))
sqr.err <- (test-ens)^2
sqr.err <- sqr.err[which(!is.na(sqr.err))]
res[row.idx,1] <- sqrt(mean(sqr.err))
res[row.idx,2] <- t.test((test-basic.comp)^2,sqr.err,
var.equal=TRUE,alternative="greater")$p.value
res[row.idx,3] <- length(sqr.err)
rownames(res)[row.idx] <- paste(tag[-c(i)],collapse=sep)
row.idx <- row.idx+1
}
ens <- approach(as.list(df))
sqr.err <- (test-ens)^2
sqr.err <- sqr.err[which(!is.na(sqr.err))]
res[row.idx,1] <- sqrt(mean(sqr.err))
res[row.idx,2] <- t.test((test-basic.comp)^2,sqr.err,
var.equal=TRUE,alternative="greater")$p.value
res[row.idx,3] <- length(sqr.err)
rownames(res)[row.idx] <- "All"
return(res)
}
atp14.avg <- ensemble.results(atp14.df,df.id=1,averages)
write.csv(atp14.avg,"../Results/Ensembles/atp14_averages.csv")
wta18.avg <- ensemble.results(wta18.df,df.id=2,averages)
write.csv(wta18.avg,"../Results/Ensembles/wta18_averages.csv")
atp18.avg <- ensemble.results(atp18.df,df.id=3,averages)
write.csv(atp18.avg,"../Results/Ensembles/atp18_averages.csv")
wta22.avg <- ensemble.results(wta22.df,df.id=4,averages)
write.csv(wta22.avg,"../Results/Ensembles/wta22_averages.csv")
atp22.avg <- ensemble.results(atp22.df,df.id=5,averages)
write.csv(atp22.avg,"../Results/Ensembles/atp22_averages.csv")
knitr::opts_chunk$set(echo = TRUE)
atp14.basic <- readRDS("../Results/Individual/atp14_basic")
atp14.oaf <- readRDS("../Results/Individual/atp14_oaf")
atp14.co <- readRDS("../Results/Individual/atp14_co")
atp14.co.binary <- readRDS("../Results/Individual/atp14_co_binary")
atp14.h2h <- readRDS("../Results/Individual/atp14_h2h")
atp14.h2h.binary <- readRDS("../Results/Individual/atp14_h2h_binary")
wta14.basic <- readRDS("../Results/Individual/wta14_basic")
wta14.oaf <- readRDS("../Results/Individual/wta14_oaf")
wta14.co <- readRDS("../Results/Individual/wta14_co")
wta14.co.binary <- readRDS("../Results/Individual/wta14_co_binary")
wta14.h2h <- readRDS("../Results/Individual/wta14_h2h")
wta14.h2h.binary <- readRDS("../Results/Individual/wta14_h2h_binary")
atp18.basic <- readRDS("../Results/Individual/atp18_basic")
atp18.oaf <- readRDS("../Results/Individual/atp18_oaf")
atp18.co <- readRDS("../Results/Individual/atp18_co")
atp18.co.binary <- readRDS("../Results/Individual/atp18_co_binary")
atp18.h2h <- readRDS("../Results/Individual/atp18_h2h")
atp18.h2h.binary <- readRDS("../Results/Individual/atp18_h2h_binary")
wta18.basic <- readRDS("../Results/Individual/wta18_basic")
wta18.oaf <- readRDS("../Results/Individual/wta18_oaf")
wta18.co <- readRDS("../Results/Individual/wta18_co")
wta18.co.binary <- readRDS("../Results/Individual/wta18_co_binary")
wta18.h2h <- readRDS("../Results/Individual/wta18_h2h")
wta18.h2h.binary <- readRDS("../Results/Individual/wta18_h2h_binary")
atp22.basic <- readRDS("../Results/Individual/atp22_basic")
atp22.oaf <- readRDS("../Results/Individual/atp22_oaf")
atp22.co <- readRDS("../Results/Individual/atp22_co")
atp22.co.binary <- readRDS("../Results/Individual/atp22_co_binary")
atp22.h2h <- readRDS("../Results/Individual/atp22_h2h")
atp22.h2h.binary <- readRDS("../Results/Individual/atp22_h2h_binary")
wta22.basic <- readRDS("../Results/Individual/wta22_basic")
wta22.oaf <- readRDS("../Results/Individual/wta22_oaf")
wta22.co <- readRDS("../Results/Individual/wta22_co")
wta22.co.binary <- readRDS("../Results/Individual/wta22_co_binary")
wta22.h2h <- readRDS("../Results/Individual/wta22_h2h")
wta22.h2h.binary <- readRDS("../Results/Individual/wta22_h2h_binary")
atp14.h2h.valid <- atp14.h2h[which(atp14.h2h>0)]
wta14.h2h.valid <- wta14.h2h[which(wta14.h2h>0)]
atp18.h2h.valid <- atp18.h2h[which(atp18.h2h>0)]
wta18.h2h.valid <- wta18.h2h[which(wta18.h2h>0)]
atp22.h2h.valid <- atp22.h2h[which(atp22.h2h>0)]
wta22.h2h.valid <- wta22.h2h[which(wta22.h2h>0)]
atp14.co.valid <- atp14.co[which(atp14.co>0)]
wta14.co.valid <- wta14.co[which(wta14.co>0)]
atp18.co.valid <- atp18.co[which(atp18.co>0)]
wta18.co.valid <- wta18.co[which(wta18.co>0)]
atp22.co.valid <- atp22.co[which(atp22.co>0)]
wta22.co.valid <- wta22.co[which(wta22.co>0)]
atp14.basic.pure <- readRDS("../Results/Individual/atp14_basic_pure")
wta14.basic.pure <- readRDS("../Results/Individual/wta14_basic_pure")
atp18.basic.pure <- readRDS("../Results/Individual/atp18_basic_pure")
wta18.basic.pure <- readRDS("../Results/Individual/wta18_basic_pure")
atp22.basic.pure <- readRDS("../Results/Individual/atp22_basic_pure")
wta22.basic.pure <- readRDS("../Results/Individual/wta22_basic_pure")
atp14.oaf.pure <- readRDS("../Results/Individual/atp14_oaf_pure")
wta14.oaf.pure <- readRDS("../Results/Individual/wta14_oaf_pure")
atp18.oaf.pure <- readRDS("../Results/Individual/atp18_oaf_pure")
wta18.oaf.pure <- readRDS("../Results/Individual/wta18_oaf_pure")
atp22.oaf.pure <- readRDS("../Results/Individual/atp22_oaf_pure")
wta22.oaf.pure <- readRDS("../Results/Individual/wta22_oaf_pure")
atp14.basic.pure.valid <- atp14.basic.pure[which(atp14.basic.pure>0)]
wta14.basic.pure.valid <- wta14.basic.pure[which(wta14.basic.pure>0)]
atp18.basic.pure.valid <- atp18.basic.pure[which(atp18.basic.pure>0)]
wta18.basic.pure.valid <- wta18.basic.pure[which(wta18.basic.pure>0)]
atp22.basic.pure.valid <- atp22.basic.pure[which(atp22.basic.pure>0)]
wta22.basic.pure.valid <- wta22.basic.pure[which(wta22.basic.pure>0)]
atp14.oaf.pure.valid <- atp14.oaf.pure[which(atp14.oaf.pure>0)]
wta14.oaf.pure.valid <- wta14.oaf.pure[which(wta14.oaf.pure>0)]
atp18.oaf.pure.valid <- atp18.oaf.pure[which(atp18.oaf.pure>0)]
wta18.oaf.pure.valid <- wta18.oaf.pure[which(wta18.oaf.pure>0)]
atp22.oaf.pure.valid <- atp22.oaf.pure[which(atp22.oaf.pure>0)]
wta22.oaf.pure.valid <- wta22.oaf.pure[which(wta22.oaf.pure>0)]
atp14.ps.up <- readRDS("../Results/Individual/atp14_ps_up")
atp14.ps.down <- readRDS("../Results/Individual/atp14_ps_down")
wta14.ps.up <- readRDS("../Results/Individual/wta14_ps_up")
wta14.ps.down <- readRDS("../Results/Individual/wta14_ps_down")
atp18.ps.up <- readRDS("../Results/Individual/atp18_ps_up")
atp18.ps.down <- readRDS("../Results/Individual/atp18_ps_down")
wta18.ps.up <- readRDS("../Results/Individual/wta18_ps_up")
wta18.ps.down <- readRDS("../Results/Individual/wta18_ps_down")
atp22.ps.up <- readRDS("../Results/Individual/atp22_ps_up")
atp22.ps.down <- readRDS("../Results/Individual/atp22_ps_down")
wta22.ps.up <- readRDS("../Results/Individual/wta22_ps_up")
wta22.ps.down <- readRDS("../Results/Individual/wta22_ps_down")
atp14.co.oaf <- readRDS("../Results/Ensembles/atp14_co(oaf)")
atp14.co.oaf.binary <- readRDS("../Results/Ensembles/atp14_co(oaf)_binary")
wta14.co.oaf <- readRDS("../Results/Ensembles/wta14_co(oaf)")
wta14.co.oaf.binary <- readRDS("../Results/Ensembles/wta14_co(oaf)_binary")
atp18.co.oaf <- readRDS("../Results/Ensembles/atp18_co(oaf)")
atp18.co.oaf.binary <- readRDS("../Results/Ensembles/atp18_co(oaf)_binary")
wta18.co.oaf <- readRDS("../Results/Ensembles/wta18_co(oaf)")
wta18.co.oaf.binary <- readRDS("../Results/Ensembles/wta18_co(oaf)_binary")
atp22.co.oaf <- readRDS("../Results/Ensembles/atp22_co(oaf)")
atp22.co.oaf.binary <- readRDS("../Results/Ensembles/atp22_co(oaf)_binary")
wta22.co.oaf <- readRDS("../Results/Ensembles/wta22_co(oaf)")
wta22.co.oaf.binary <- readRDS("../Results/Ensembles/wta22_co(oaf)_binary")
atp14.co.oaf.valid <- atp14.co.oaf[which(atp14.co.oaf>0)]
wta14.co.oaf.valid <- wta14.co.oaf[which(wta14.co.oaf>0)]
atp18.co.oaf.valid <- atp18.co.oaf[which(atp18.co.oaf>0)]
wta18.co.oaf.valid <- wta18.co.oaf[which(wta18.co.oaf>0)]
atp22.co.oaf.valid <- atp22.co.oaf[which(atp22.co.oaf>0)]
wta22.co.oaf.valid <- wta22.co.oaf[which(wta22.co.oaf>0)]
# column order of df's must be in order of tags below
tag <- c("H2H","CO","OAF","CO(OAF)","PSU","PSD")
atp14.df <- data.frame(cbind(atp14.h2h,atp14.co,atp14.oaf,
atp14.co.oaf,atp14.ps.up,atp14.ps.down))
colnames(atp14.df) <- tag
wta14.df <- data.frame(cbind(wta14.h2h,wta14.co,wta14.oaf,
wta14.co.oaf,wta14.ps.up,wta14.ps.down))
colnames(wta14.df) <- tag
atp18.df <- data.frame(cbind(atp18.h2h,atp18.co,atp18.oaf,
atp18.co.oaf,atp18.ps.up,atp18.ps.down))
colnames(atp18.df) <- tag
wta18.df <- data.frame(cbind(wta18.h2h,wta18.co,wta18.oaf,
wta18.co.oaf,wta18.ps.up,wta18.ps.down))
colnames(wta18.df) <- tag
atp22.df <- data.frame(cbind(atp22.h2h,atp22.co,atp22.oaf,
atp22.co.oaf,atp22.ps.up,atp22.ps.down))
colnames(atp22.df) <- tag
wta22.df <- data.frame(cbind(wta22.h2h,wta22.co,wta22.oaf,
wta22.co.oaf,wta22.ps.up,wta22.ps.down))
colnames(wta22.df) <- tag
# binary versions with 0, +/-1 for consensus and majority
atp14.df.binary <- data.frame(cbind(atp14.h2h.binary,atp14.co.binary,atp14.oaf>=0.5,
atp14.co.oaf.binary,atp14.ps.up>=0.5,atp14.ps.down>=0.5))
colnames(atp14.df.binary) <- tag
wta14.df.binary <- data.frame(cbind(wta14.h2h.binary,wta14.co.binary,wta14.oaf>=0.5,
wta14.co.oaf.binary,wta14.ps.up>=0.5,wta14.ps.down>=0.5))
colnames(wta14.df.binary) <- tag
atp18.df.binary <- data.frame(cbind(atp18.h2h.binary,atp18.co.binary,atp18.oaf>=0.5,
atp18.co.oaf.binary,atp18.ps.up>=0.5,atp18.ps.down>=0.5))
colnames(atp18.df.binary) <- tag
wta18.df.binary <- data.frame(cbind(wta18.h2h.binary,wta18.co.binary,wta18.oaf>=0.5,
wta18.co.oaf.binary,wta18.ps.up>=0.5,wta18.ps.down>=0.5))
colnames(wta18.df.binary) <- tag
atp22.df.binary <- data.frame(cbind(atp22.h2h.binary,atp22.co.binary,atp22.oaf>=0.5,
atp22.co.oaf.binary,atp22.ps.up>=0.5,atp22.ps.down>=0.5))
colnames(atp22.df.binary) <- tag
wta22.df.binary <- data.frame(cbind(wta22.h2h.binary,wta22.co.binary,wta22.oaf>=0.5,
wta22.co.oaf.binary,wta22.ps.up>=0.5,wta22.ps.down>=0.5))
colnames(wta22.df.binary) <- tag
consensus <- function(...){
# function takes binary results, so vector only contains 0, +/- 1
# function assumes at least two lists of same lengths if not more
if (is.list(c(...))) {
x <- c(...)
} else {
x <- list(...)
}
n <- length(x)
ind <- rep(TRUE,length(x[[1]]))
for (i in 2:n){
ind <- ind & x[[1]]==x[[i]]
}
ind <- ind & x[[1]]>=0
return(x[[1]][ind])
}
ensemble.results <- function(df,df.id,approach,sep="&&"){
# df one of the 6 dataframes - "atp/wta"+"14/18/22" below
# df.id is for the comparison vectors
# atp14: 1, wta14:2, atp18: 3, wta18: 4, atp22: 5, wta22: 6
if (df.id==1){
basic.comp <- atp14.basic.pure.valid >= 0.5
oaf.comp <- atp14.oaf.pure.valid >= 0.5
} else if (df.id==2){
basic.comp <- wta14.basic.pure.valid >= 0.5
oaf.comp <- wta14.oaf.pure.valid >= 0.5
} else if (df.id==3) {
basic.comp <- atp18.basic.pure.valid >= 0.5
oaf.comp <- atp18.oaf.pure.valid >= 0.5
} else if (df.id==4) {
basic.comp <- wta18.basic.pure.valid >= 0.5
oaf.comp <- wta18.oaf.pure.valid >= 0.5
} else if (df.id==5) {
basic.comp <- atp22.basic.pure.valid >= 0.5
oaf.comp <- atp22.oaf.pure.valid >= 0.5
} else if (df.id==6) {
basic.comp <- wta22.basic.pure.valid >= 0.5
oaf.comp <- wta22.oaf.pure.valid >= 0.5
}
n1 <- length(basic.comp)
n2 <- length(oaf.comp)
res <- data.frame(matrix(0,nrow=57,ncol=4)) # nrow=57=6c2+6c3+6c4+6c5+6c6
colnames(res) <- c("score","p-value.basic.pure",
"p-value.oaf.pure","coverage")
row.idx <- 1
# 6c2
for (i in 1:5){
for (j in (i+1):6){
ens <- approach(df[,i],df[,j])
n3 <- length(ens)
res[row.idx,1] <- mean(ens)
res[row.idx,2] <- prop.test(c(sum(basic.comp),sum(ens)),
c(n1,n3),alternative="less",
correct=FALSE)$p.value
res[row.idx,3] <- prop.test(c(sum(oaf.comp),sum(ens)),
c(n2,n3),alternative="less",
correct=FALSE)$p.value
res[row.idx,4] <- n3
rownames(res)[row.idx] <- paste(tag[i],tag[j],sep=sep)
row.idx <- row.idx+1
}
}
# 6c3
for (i in 1:4){
for (j in (i+1):5){
for (k in (j+1):6){
ens <- approach(df[,i],df[,j],df[,k])
n3 <- length(ens)
res[row.idx,1] <- mean(ens)
res[row.idx,2] <- prop.test(c(sum(basic.comp),sum(ens)),
c(n1,n3),alternative="less",
correct=FALSE)$p.value
res[row.idx,3] <- prop.test(c(sum(oaf.comp),sum(ens)),
c(n2,n3),alternative="less",
correct=FALSE)$p.value
res[row.idx,4] <- n3
rownames(res)[row.idx] <- paste(tag[i],tag[j],tag[k],sep=sep)
row.idx <- row.idx+1
}
}
}
# 6c4
for (i in 1:5){
for (j in (i+1):6){
ens <- approach(as.list(df[,-c(i,j)]))
n3 <- length(ens)
res[row.idx,1] <- mean(ens)
res[row.idx,2] <- prop.test(c(sum(basic.comp),sum(ens)),
c(n1,n3),alternative="less",
correct=FALSE)$p.value
res[row.idx,3] <- prop.test(c(sum(oaf.comp),sum(ens)),
c(n2,n3),alternative="less",
correct=FALSE)$p.value
res[row.idx,4] <- n3
rownames(res)[row.idx] <- paste(tag[-c(i,j)],collapse=sep)
row.idx <- row.idx+1
}
}
# 6c5
for (i in 1:6){
ens <- approach(as.list(df[,-c(i)]))
n3 <- length(ens)
res[row.idx,1] <- mean(ens)
res[row.idx,2] <- prop.test(c(sum(basic.comp),sum(ens)),
c(n1,n3),alternative="less",
correct=FALSE)$p.value
res[row.idx,3] <- prop.test(c(sum(oaf.comp),sum(ens)),
c(n2,n3),alternative="less",
correct=FALSE)$p.value
res[row.idx,4] <- n3
rownames(res)[row.idx] <- paste(tag[-c(i)],collapse=sep)
row.idx <- row.idx+1
}
ens <- approach(as.list(df))
n3 <- length(ens)
res[row.idx,1] <- mean(ens)
res[row.idx,2] <- prop.test(c(sum(basic.comp),sum(ens)),
c(n1,n3),alternative="less",
correct=FALSE)$p.value
res[row.idx,3] <- prop.test(c(sum(oaf.comp),sum(ens)),
c(n1,n3),alternative="less",
correct=FALSE)$p.value
res[row.idx,4] <- n3
rownames(res)[row.idx] <- "All"
return(res)
}
if (!(1==2)){
print("a")
}
merge <- function(...){
# function takes numerical results with -1 as NA and x \in (0,1) otherwise
# function assumes at least two lists of same lengths if not more
if (is.list(c(...))) {
x <- c(...)
} else {
x <- list(...)
}
n <- length(x) # number of components
res <- c()
N <- length(x[[1]]) # length of one component
for (i in 1:N){
sum <- 0 # running sum for averaging
num <- 0 # number of given lists that have coverage for this entry
no.coverage <- TRUE # flag for when merge should not be conducted
for (j in 1:n){
if (x[[j]][i]>=0){
sum <- sum+x[[j]][i]
num <- num+1
no.coverage <- FALSE
}
}
if (no.coverage) next
res <- c(res,sum/num)
}
res <- res>=0.5
return(res)
}
atp14.merge <- ensemble.results(atp14.df,df.id=1,merge,sep="+")
write.csv(atp14.merge,"../Results/Ensembles/atp14_merges.csv")
wta14.merge <- ensemble.results(wta14.df,df.id=2,merge,sep="+")
write.csv(wta14.merge,"../Results/Ensembles/wta14_merges.csv")
atp18.merge <- ensemble.results(atp18.df,df.id=3,merge,sep="+")
write.csv(atp18.merge,"../Results/Ensembles/atp18_merges.csv")
wta18.merge <- ensemble.results(wta18.df,df.id=4,merge,sep="+")
write.csv(wta18.merge,"../Results/Ensembles/wta18_merges.csv")
atp22.merge <- ensemble.results(atp22.df,df.id=5,merge,sep="+")
write.csv(atp22.merge,"../Results/Ensembles/atp22_merges.csv")
wta22.merge <- ensemble.results(wta22.df,df.id=6,merge,sep="+")
write.csv(wta22.merge,"../Results/Ensembles/wta22_merges.csv")
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
# manual accuracy and duration rmse scores from results spreadsheet
accuracy <- c(0.59023,0.63835,0.63415,0.64340, # atp 14
0.60124,0.63006,0.58138,0.59070, # wta 18
0.61733,0.63957,0.63395,0.64122, # atp 18
0.60175,0.63166,0.59055,0.52372, # wta 22
0.60820,0.65164,0.61471,0.61674) # atp 22
rmse <- c(42.83261,40.92694,42.1763,40.73772,  # atp 14
49.37423,49.09437,50.28881,64.90247, # wta 18
43.18453,42.71323,43.56084,46.78802, # atp 18
33.01183,33.07469,32.77271,34.18973, # wta 22
45.13423,44.65613,44.83542,46.22931) # atp 22
cor.test(accuracy,rmse,method="kendall")
cor.test(accuracy,rmse,method="pearson")
cor.test(accuracy,rmse,method="kendall")
cor.test(accuracy,rmse,method="spearman")
accuracy
rmse
cor.test(accuracy,rmse,alternative="less",method="kendall")
