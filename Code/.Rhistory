}
get.prob.post.2022 <- function(p1,p2,match,atp=TRUE){
if (match %in% grand.slams){
ret <- match.win.prob.pw(p1,p2,format=2+atp)
} else {
ret <- match.win.prob.pw(p1,p2,format=0)
}
return(ret)
}
# overall function to do experiments with
conduct.experiment <- function(inactive.states, P, test.set, atp=TRUE, test.year=0){
# inactive.states:
#   vector containing states (19 for tiebreak) to deactivate, i.e.
#   replace the state's unique p with the player's overall p
# P:
#   data.frame containing players' individual p vectors
#   usually obtained via create.p.vector output
# test.set:
#   data set used to test accuracy of prediction
# atp:
#   boolean defaulted to true if test.set is ATP data
# test.year:
#   three valid values: 0,1,2
#   0 for up to 2018, 1 for 2019 to 2021 inclusive, 2 for 2022 beyond
#   no testing year actually falls between 2019-2021, this new version
#   just depreicates this, so 1 is not an actual valid input for test.year
# make copy of P and change copy to align with specified inactive.states
cP <- P[,1:19]
cP[,inactive.states] <- P[,20]
# record exact probability values from model
# so we can examine closer if we want
n <- nrow(test.set)
exact <- rep(0,n)
# experiment begins
pbp.names <- rownames(cP)
for (i in 1:n){
matchup <- test.set[i,]
winner <- matchup$winner_name
loser <- matchup$loser_name
inds <- match(c(winner,loser),pbp.names)
winner.P <- unname(unlist(cP[inds[1],]))
loser.P <- unname(unlist(cP[inds[2],]))
if (test.year==0){
exact[i] <- get.prob.pre.2022(p1=winner.P,p2=loser.P,
matchup$tourney_name,atp)
} else {
exact[i] <- get.prob.post.2022(p1=winner.P,p2=loser.P,
matchup$tourney_name,atp)
}
}
res <- exact > 0.5
return(list("score"=mean(res),"result"=res,"exact"=exact))
}
downwards.wrapper <- function(deactivate,P,testset,atp,test.year){
# atp is boolean for if testset is for ATP
scores <- rep(0,19)
if (length(deactivate)==0){
options <- 1:19
} else {
options <- (1:19)[-deactivate]
}
for (i in options){
scores[i] <- conduct.experiment(c(i,deactivate),P,testset,atp,test.year)$score
# so deactivated state's indices will have 0
}
return(list("max"=max(scores),"candidates"=which(scores==max(scores))))
}
upwards.wrapper <- function(activate,P,testset,atp,test.year){
# atp is boolean for if testset is for ATP
if (length(activate)==0){
deactivate <- 1:19
} else {
deactivate <- (1:19)[-activate]
}
scores <- rep(0,19)
for (i in deactivate){
deactivate.no.i <- (1:19)[-c(activate,i)]
scores[i] <- conduct.experiment(deactivate.no.i,P,testset,atp,test.year)$score
# activated state's indices will have 0
}
return(list("max"=max(scores),"candidates"=which(scores==max(scores))))
}
downwards.experiment <- function(starting.states,P,testset,atp,previous.scores,
depth=18,test.year=2){
diverge.lists <- c()
deactivate <- starting.states
# through recursion, aim to combine all ovr.lists produced
ovr.list <- list() # to contain lists containing state & score vectors
path <- list()
# if no previous scores, can initialize NULL list element for scores:
# https://stackoverflow.com/questions/45666451/r-adding-an-empty-vector-to-a-list
if (length(previous.scores)==0){
path[1] <- list(NULL)
} else {
path[[1]] <- previous.scores # to record best scores of this path
}
# path[[2]] to record states deactivated, but does not need initialization
while(length(deactivate) < depth){
res <- downwards.wrapper(deactivate,P,testset,atp,test.year)
score <- res$max
cands <- res$candidates
scores.sofar <- c(path[[1]],score)
l <- length(cands)
if (l>1){
# recursion call
for (i in 2:l){
diverge.lists <- c(
diverge.lists,
downwards.experiment(c(deactivate,cands[i]),P,testset,atp,scores.sofar,
depth,test.year))
}
}
path[[1]] <- scores.sofar
deactivate <- c(deactivate,cands[1])
path[[2]] <- deactivate
}
path[[2]] <- deactivate
ovr.list[[1]] <- path
ovr.list <- c(ovr.list,diverge.lists)
return(ovr.list)
}
upwards.experiment <- function(starting.states,P,testset,atp,previous.scores,
depth=18,test.year=2){
diverge.lists <- c()
activate <- starting.states
# through recursion, aim to combine all ovr.lists produced
ovr.list <- list() # to contain lists containing state & score vectors
path <- list()
# if no previous scores, can initialize NULL list element for scores:
# https://stackoverflow.com/questions/45666451/r-adding-an-empty-vector-to-a-list
if (length(previous.scores)==0){
path[1] <- list(NULL)
} else {
path[[1]] <- previous.scores # to record best scores of this path
}
# path[[2]] to record states deactivated, but does not need initialization
while(length(activate) < depth){
res <- upwards.wrapper(activate,P,testset,atp,test.year)
score <- res$max
cands <- res$candidates
scores.sofar <- c(path[[1]],score)
l <- length(cands)
if (l>1){
# recursion call
for (i in 2:l){
diverge.lists <- c(
diverge.lists,
upwards.experiment(c(activate,cands[i]),P,testset,atp,scores.sofar,
depth,test.year))
}
}
path[[1]] <- scores.sofar
activate <- c(activate,cands[1])
path[[2]] <- activate
}
path[[2]] <- activate
ovr.list[[1]] <- path
ovr.list <- c(ovr.list,diverge.lists)
return(ovr.list)
}
plot.path.score <- function(n.down,dat.down,n.up,dat.up,
P, test.set, atp=TRUE, main="Score",
ylim.lower=0.55,ylim.upper=0.7,hide.axis=FALSE){
# n - length of path given
# dat - data saved containing paths
# ylim.lower(upper) - ylim for plot, set to around 0(20) for type=2
baseline.down <- conduct.experiment(c(),P,test.set,atp)$score
baseline.up <- conduct.experiment(1:19,P,test.set,atp)$score
if (hide.axis) {
plot(0:n.up,c(baseline.up,dat.up[[1]][[1]]),'l',
xlim=c(0,20),ylim=c(ylim.lower,ylim.upper),main=main)
} else {
plot(0:n.up,c(baseline.up,dat.up[[1]][[1]]),'l',
xlim=c(0,20),ylim=c(ylim.lower,ylim.upper),main=main,
ylab="Score",xlab="# States Activated")
}
for (i in 1:length(dat.up)){
lines(0:n.up,c(baseline.up,dat.up[[i]][[1]]))
}
for (i in 1:length(dat.down)){
lines(20:(20-n.down),c(baseline.down,dat.down[[i]][[1]]))
}
}
plot.path.state <- function(n.down,dat.down,n.up,dat.up,main="States",
ylim.lower=0,ylim.upper=20,hide.axis=FALSE){
# n - length of path given
# dat - data saved containing paths
# ylim.lower(upper) - ylim for plot, set to around 0(20) for state
if (hide.axis) {
plot(1:n.up,dat.up[[1]][[2]],'l',
xlim=c(1,19),ylim=c(ylim.lower,ylim.upper),main=main)
} else {
plot(1:n.up,dat.up[[1]][[2]],'l',
xlim=c(1,19),ylim=c(ylim.lower,ylim.upper),main=main,
ylab="States",xlab="# States Activated")
}
for (i in 1:length(dat.up)){
lines(1:n.up,dat.up[[i]][[2]])
}
for (i in 1:length(dat.down)){
lines(19:(20-n.down),dat.down[[i]][[2]])
}
}
# Testing data
# if Error: no more error handlers available (recursive errors?); invoking 'abort' restart
# Warning: type 29 is unimplemented in 'type2char'Error in pmatch(rw, c("read", "write"), 0L) :
# INTEGER() can only be applied to a 'integer', not a 'unknown type #29'
# just run again
atp.test.2014 <- read.csv('../New Data/atp/atp_testing_2014.csv')
wta.test.2014 <- read.csv('../New Data/wta/wta_testing_2014.csv')
atp.test.2018 <- read.csv('../New Data/atp/atp_testing_2018.csv')
wta.test.2018 <- read.csv('../New Data/wta/wta_testing_2018.csv')
atp.test.2022 <- read.csv('../New Data/atp/atp_testing_2022.csv')
wta.test.2022 <- read.csv('../New Data/wta/wta_testing_2022.csv')
# following function highlights matches that were incomplete
# this is determined by if the score has letters ("W/O","Def.","RET" etc.)
# takes as input the score column of a dataset and returns indexes
ic.match <- function(score) grep("[A-Za-z]",score)
atp.test.2014 <- atp.test.2014[-ic.match(atp.test.2014$score),]
wta.test.2014 <- wta.test.2014[-ic.match(wta.test.2014$score),]
atp.test.2018 <- atp.test.2018[-ic.match(atp.test.2018$score),]
wta.test.2018 <- wta.test.2018[-ic.match(wta.test.2018$score),]
atp.test.2022 <- atp.test.2022[-ic.match(atp.test.2022$score),]
wta.test.2022 <- wta.test.2022[-ic.match(wta.test.2022$score),]
row.names(atp.test.2014) <- NULL
row.names(wta.test.2014) <- NULL
row.names(atp.test.2018) <- NULL
row.names(wta.test.2018) <- NULL
row.names(atp.test.2022) <- NULL
row.names(wta.test.2022) <- NULL
# Validation data
atp.val.2013 <- read.csv('../New Data/atp/atp_val_2013.csv')
wta.val.2013 <- read.csv('../New Data/wta/wta_val_2013.csv')
atp.val.2017 <- read.csv('../New Data/atp/atp_val_2017.csv')
wta.val.2017 <- read.csv('../New Data/wta/wta_val_2017.csv')
atp.val.2021 <- read.csv('../New Data/atp/atp_val_2021.csv')
wta.val.2021 <- read.csv('../New Data/wta/wta_val_2021.csv')
atp.val.2013 <- atp.val.2013[-ic.match(atp.val.2013$score),]
wta.val.2013 <- wta.val.2013[-ic.match(wta.val.2013$score),]
atp.val.2017 <- atp.val.2017[-ic.match(atp.val.2017$score),]
wta.val.2017 <- wta.val.2017[-ic.match(wta.val.2017$score),]
atp.val.2021 <- atp.val.2021[-ic.match(atp.val.2021$score),]
wta.val.2021 <- wta.val.2021[-ic.match(wta.val.2021$score),]
row.names(atp.val.2013) <- NULL
row.names(wta.val.2013) <- NULL
row.names(atp.val.2017) <- NULL
row.names(wta.val.2017) <- NULL
row.names(atp.val.2021) <- NULL
row.names(wta.val.2021) <- NULL
# Point-by-Point data
pbp.123 <- read.csv('../New Data/pbp/2011-2013_pbp_individual.csv')
pbp.567 <- read.csv('../New Data/pbp/2015-2017_pbp_individual.csv')
pbp.901 <- read.csv('../New Data/pbp/2019-2021_pbp_individual.csv')
pbp.12 <- read.csv('../New Data/pbp/2011-2012_pbp_individual.csv')
pbp.56 <- read.csv('../New Data/pbp/2015-2016_pbp_individual.csv')
pbp.90 <- read.csv('../New Data/pbp/2019-2020_pbp_individual.csv')
# Getting unique names
atp.names.2014 <- get.unique.players(atp.test.2014)
atp.names.2018 <- get.unique.players(atp.test.2018)
atp.names.2022 <- get.unique.players(atp.test.2022)
wta.names.2014 <- get.unique.players(wta.test.2014)
wta.names.2018 <- get.unique.players(wta.test.2018)
wta.names.2022 <- get.unique.players(wta.test.2022)
atp.names.2013 <- get.unique.players(atp.val.2013)
atp.names.2017 <- get.unique.players(atp.val.2017)
atp.names.2021 <- get.unique.players(atp.val.2021)
wta.names.2013 <- get.unique.players(wta.val.2013)
wta.names.2017 <- get.unique.players(wta.val.2017)
wta.names.2021 <- get.unique.players(wta.val.2021)
# create p vectors
atp.P.123.14 <- create.p.vector(atp.names.2014,pbp.123)
atp.P.567.18 <- create.p.vector(atp.names.2018,pbp.567)
atp.P.901.22 <- create.p.vector(atp.names.2022,pbp.901)
wta.P.123.14 <- create.p.vector(wta.names.2014,pbp.123)
wta.P.567.18 <- create.p.vector(wta.names.2018,pbp.567)
wta.P.901.22 <- create.p.vector(wta.names.2022,pbp.901)
atp.P.12.14 <- create.p.vector(atp.names.2014,pbp.12)
atp.P.56.18 <- create.p.vector(atp.names.2018,pbp.56)
atp.P.90.22 <- create.p.vector(atp.names.2022,pbp.90)
wta.P.12.14 <- create.p.vector(wta.names.2014,pbp.12)
wta.P.56.18 <- create.p.vector(wta.names.2018,pbp.56)
wta.P.90.22 <- create.p.vector(wta.names.2022,pbp.90)
atp.P.123.13 <- create.p.vector(atp.names.2013,pbp.123)
atp.P.567.17 <- create.p.vector(atp.names.2017,pbp.567)
atp.P.901.21 <- create.p.vector(atp.names.2021,pbp.901)
wta.P.123.13 <- create.p.vector(wta.names.2013,pbp.123)
wta.P.567.17 <- create.p.vector(wta.names.2017,pbp.567)
wta.P.901.21 <- create.p.vector(wta.names.2021,pbp.901)
atp.P.12.13 <- create.p.vector(atp.names.2013,pbp.12)
atp.P.56.17 <- create.p.vector(atp.names.2017,pbp.56)
atp.P.90.21 <- create.p.vector(atp.names.2021,pbp.90)
wta.P.12.13 <- create.p.vector(wta.names.2013,pbp.12)
wta.P.56.17 <- create.p.vector(wta.names.2017,pbp.56)
wta.P.90.21 <- create.p.vector(wta.names.2021,pbp.90)
for (i in 1:ncol(atp.P.123.14)){
atp.P.123.14[which(is.na(atp.P.123.14[,i])),i] <-
mean(atp.P.123.14[-which(is.na(atp.P.123.14[,i])),i])
}
for (i in 1:ncol(atp.P.567.18)){
atp.P.567.18[which(is.na(atp.P.567.18[,i])),i] <-
mean(atp.P.567.18[-which(is.na(atp.P.567.18[,i])),i])
}
for (i in 1:ncol(atp.P.901.22)){
atp.P.901.22[which(is.na(atp.P.901.22[,i])),i] <-
mean(atp.P.901.22[-which(is.na(atp.P.901.22[,i])),i])
}
for (i in 1:ncol(wta.P.123.14)){
wta.P.123.14[which(is.na(wta.P.123.14[,i])),i] <-
mean(wta.P.123.14[-which(is.na(wta.P.123.14[,i])),i])
}
for (i in 1:ncol(wta.P.567.18)){
wta.P.567.18[which(is.na(wta.P.567.18[,i])),i] <-
mean(wta.P.567.18[-which(is.na(wta.P.567.18[,i])),i])
}
for (i in 1:ncol(wta.P.901.22)){
wta.P.901.22[which(is.na(wta.P.901.22[,i])),i] <-
mean(wta.P.901.22[-which(is.na(wta.P.901.22[,i])),i])
}
for (i in 1:ncol(atp.P.12.14)){
atp.P.12.14[which(is.na(atp.P.12.14[,i])),i] <-
mean(atp.P.12.14[-which(is.na(atp.P.12.14[,i])),i])
}
for (i in 1:ncol(atp.P.56.18)){
atp.P.56.18[which(is.na(atp.P.56.18[,i])),i] <-
mean(atp.P.56.18[-which(is.na(atp.P.56.18[,i])),i])
}
for (i in 1:ncol(atp.P.90.22)){
atp.P.90.22[which(is.na(atp.P.90.22[,i])),i] <-
mean(atp.P.90.22[-which(is.na(atp.P.90.22[,i])),i])
}
for (i in 1:ncol(wta.P.12.14)){
wta.P.12.14[which(is.na(wta.P.12.14[,i])),i] <-
mean(wta.P.12.14[-which(is.na(wta.P.12.14[,i])),i])
}
for (i in 1:ncol(wta.P.56.18)){
wta.P.56.18[which(is.na(wta.P.56.18[,i])),i] <-
mean(wta.P.56.18[-which(is.na(wta.P.56.18[,i])),i])
}
for (i in 1:ncol(wta.P.90.22)){
wta.P.90.22[which(is.na(wta.P.90.22[,i])),i] <-
mean(wta.P.90.22[-which(is.na(wta.P.90.22[,i])),i])
}
for (i in 1:ncol(atp.P.123.13)){
atp.P.123.13[which(is.na(atp.P.123.13[,i])),i] <-
mean(atp.P.123.13[-which(is.na(atp.P.123.13[,i])),i])
}
for (i in 1:ncol(atp.P.567.17)){
atp.P.567.17[which(is.na(atp.P.567.17[,i])),i] <-
mean(atp.P.567.17[-which(is.na(atp.P.567.17[,i])),i])
}
for (i in 1:ncol(atp.P.901.21)){
atp.P.901.21[which(is.na(atp.P.901.21[,i])),i] <-
mean(atp.P.901.21[-which(is.na(atp.P.901.21[,i])),i])
}
for (i in 1:ncol(wta.P.123.13)){
wta.P.123.13[which(is.na(wta.P.123.13[,i])),i] <-
mean(wta.P.123.13[-which(is.na(wta.P.123.13[,i])),i])
}
for (i in 1:ncol(wta.P.567.17)){
wta.P.567.17[which(is.na(wta.P.567.17[,i])),i] <-
mean(wta.P.567.17[-which(is.na(wta.P.567.17[,i])),i])
}
for (i in 1:ncol(wta.P.901.21)){
wta.P.901.21[which(is.na(wta.P.901.21[,i])),i] <-
mean(wta.P.901.21[-which(is.na(wta.P.901.21[,i])),i])
}
for (i in 1:ncol(atp.P.12.13)){
atp.P.12.13[which(is.na(atp.P.12.13[,i])),i] <-
mean(atp.P.12.13[-which(is.na(atp.P.12.13[,i])),i])
}
for (i in 1:ncol(atp.P.56.17)){
atp.P.56.17[which(is.na(atp.P.56.17[,i])),i] <-
mean(atp.P.56.17[-which(is.na(atp.P.56.17[,i])),i])
}
for (i in 1:ncol(atp.P.90.21)){
atp.P.90.21[which(is.na(atp.P.90.21[,i])),i] <-
mean(atp.P.90.21[-which(is.na(atp.P.90.21[,i])),i])
}
for (i in 1:ncol(wta.P.12.13)){
wta.P.12.13[which(is.na(wta.P.12.13[,i])),i] <-
mean(wta.P.12.13[-which(is.na(wta.P.12.13[,i])),i])
}
for (i in 1:ncol(wta.P.56.17)){
wta.P.56.17[which(is.na(wta.P.56.17[,i])),i] <-
mean(wta.P.56.17[-which(is.na(wta.P.56.17[,i])),i])
}
for (i in 1:ncol(wta.P.90.21)){
wta.P.90.21[which(is.na(wta.P.90.21[,i])),i] <-
mean(wta.P.90.21[-which(is.na(wta.P.90.21[,i])),i])
}
rm(list=c("pbp.12","pbp.123","pbp.56","pbp.567","pbp.90","pbp.901"))
# d <- downwards.experiment(c(),atp.P.12.13,atp.val.2013,TRUE,c(),depth=5,test.year=0)
# saveRDS(d, file="plateaus/d5_atp_2014.rds")
# u <- upwards.experiment(c(),atp.P.12.13,atp.val.2013,TRUE,c(),depth=5,test.year=0)
# saveRDS(u, file="plateaus/u5_atp_2014.rds")
d5.atp14 <- readRDS("plateaus/d5_atp_2014.rds")
u5.atp14 <- readRDS("plateaus/u5_atp_2014.rds")
plot.path.score(5,d5.atp14,5,u5.atp14,atp.P.12.13,atp.val.2013,main="ATP 2014")
# d <- downwards.experiment(c(),wta.P.56.17,wta.val.2017,FALSE,c(),depth=5,test.year=0)
# saveRDS(d, file="plateaus/d5_wta_2018.rds")
# u <- upwards.experiment(c(),wta.P.56.17,wta.val.2017,FALSE,c(),depth=5,test.year=0)
# saveRDS(u, file="plateaus/u5_wta_2018.rds")
d5.wta18 <- readRDS("plateaus/d5_wta_2018.rds")
u5.wta18 <- readRDS("plateaus/u5_wta_2018.rds")
plot.path.score(5,d5.wta18,5,u5.wta18,wta.P.56.17,wta.val.2017,atp=FALSE,main="WTA 2018",
ylim.upper=0.61)
plot.path.state(5,d5.wta18,5,u5.wta18,main="WTA 2018")
d5.atp14 <- readRDS("plateaus/d5_atp_2014.rds")
u5.atp14 <- readRDS("plateaus/u5_atp_2014.rds")
plot.path.score(5,d5.atp14,5,u5.atp14,atp.P.12.13,atp.val.2013,main="ATP 2014")
plot.path.state(5,d5.atp14,5,u5.atp14,main="ATP 2014")
u5.atp14
d5.atp14
# deactivate 2
conduct.experiment(c(2),wta.P.56,wta.test.2018,atp=FALSE,test.year=0)$score
# deactivate 2
conduct.experiment(c(2),atp.P.12.14,atp.test.2014,atp=TRUE,test.year=0)$score
# activate 1
conduct.experiment((1:19)[-c(1)],atp.P.12.14,atp.test.2014,atp=TRUE,test.year=0)$score
# baseline with no activations
conduct.experiment(1:19,atp.P.12.14,atp.test.2014,atp=TRUE,test.year=0)$score
# deactivate 2
conduct.experiment(c(2),atp.P.12.14,atp.test.2014,atp=TRUE,test.year=0)$score
# activate 1
conduct.experiment((1:19)[-c(1)],atp.P.12.14,atp.test.2014,atp=TRUE,test.year=0)$score
# baseline with no activations, actual baseline 0.59023
conduct.experiment(1:19,atp.P.123.14,atp.test.2014,atp=TRUE,test.year=0)$score
# deactivate 2
conduct.experiment(c(2),atp.P.123.14,atp.test.2014,atp=TRUE,test.year=0)$score
# activate 1
conduct.experiment((1:19)[-c(1)],atp.P.123.14,atp.test.2014,atp=TRUE,test.year=0)$score
d.alt <- downwards.experiment(c(),atp.P.123.13,atp.val.2013,TRUE,c(),depth=5,test.year=0)
# saveRDS(d, file="plateaus/d5_atp_2014.rds")
d.alt
plot.path.score(5,d.alt,5,u.alt,atp.P.123.13,atp.val.2013,main="ATP 2014 Alt")
u.alt <- upwards.experiment(c(),atp.P.123.13,atp.val.2013,TRUE,c(),depth=5,test.year=0)
plot.path.score(5,d.alt,5,u.alt,atp.P.123.13,atp.val.2013,main="ATP 2014 Alt")
conduct.experiment(1:19,atp.P.123.13,atp.val.2013,atp=TRUE,test.year=0)$score
conduct.experiment(c(),atp.P.123.13,atp.val.2013,atp=TRUE,test.year=0)$score
u.alt
# deactivate none
conduct.experiment(c(),atp.P.123.14,atp.test.2014,atp=TRUE,test.year=0)$score
# activate 5
conduct.experiment((1:19)[-c()],atp.P.123.14,atp.test.2014,atp=TRUE,test.year=0)$score
# deactivate none
conduct.experiment(c(),atp.P.123.14,atp.test.2014,atp=TRUE,test.year=0)$score
# activate 5
conduct.experiment((1:19)[-c(5)],atp.P.123.14,atp.test.2014,atp=TRUE,test.year=0)$score
conduct.experiment(1:19,atp.P.123.14,atp.test.2014,atp=TRUE,test.year=0)$score
# deactivate none
conduct.experiment(c(),atp.P.123.14,atp.test.2014,atp=TRUE,test.year=0)$score
# activate 5
conduct.experiment((1:19)[-c(5)],atp.P.123.14,atp.test.2014,atp=TRUE,test.year=0)$score
d5.wta18
u5.wta18
# baseline with no activations
conduct.experiment(1:19,wta.P.123.14,wta.test.2014,atp=FALSE,test.year=0)$score
# deactivate 16
conduct.experiment(c(16),wta.P.56,wta.test.2018,atp=FALSE,test.year=0)$score
# baseline with no activations
conduct.experiment(1:19,wta.P.123.14,wta.test.2014,atp=FALSE,test.year=0)$score
# deactivate 16
conduct.experiment(c(16),wta.P.567.18,wta.test.2018,atp=FALSE,test.year=0)$score
# activate 9
conduct.experiment((1:19)[-c(9)],wta.P.567.18,wta.test.2018,atp=FALSE,test.year=0)$score
d <- downwards.experiment(c(),wta.P.12.13,wta.val.2013,TRUE,c(),depth=5,test.year=0)
saveRDS(d, file="plateaus/d5_wta_2014.rds")
d
u <- upwards.experiment(c(),wta.P.12.13,wta.val.2013,TRUE,c(),depth=5,test.year=0)
saveRDS(u, file="plateaus/u5_wta_2014.rds")
d5.wta14 <- readRDS("plateaus/d5_wta_2014.rds")
u5.wta14 <- readRDS("plateaus/u5_wta_2014.rds")
plot.path.score(5,d5.wta14,5,u5.wta14,wta.P.12.13,wta.val.2013,main="WTA 2014")
plot.path.state(5,d5.wta14,5,u5.wta14,main="WTA 2014")
d5.wta14
u5.atp14
# baseline with no activations
conduct.experiment(1:19,wta.P.123.14,wta.test.2014,atp=FALSE,test.year=0)$score
# deactivate 13
conduct.experiment(c(13),wta.P.123.14,wta.test.2014,atp=FALSE,test.year=0)$score
# activate 1
conduct.experiment((1:19)[-c(1)],wta.P.123.14,wta.test.2014,atp=FALSE,test.year=0)$score
d <- downwards.experiment(c(),atp.P.56.17,atp.val.2017,FALSE,c(),depth=5,test.year=0)
saveRDS(d, file="plateaus/d5_atp_2018.rds")
u <- upwards.experiment(c(),atp.P.56.17,atp.val.2017,FALSE,c(),depth=5,test.year=0)
saveRDS(u, file="plateaus/u5_atp_2018.rds")
d5.atp18 <- readRDS("plateaus/d5_atp_2018.rds")
u5.atp18 <- readRDS("plateaus/u5_atp_2018.rds")
plot.path.score(5,d5.atp18,5,u5.atp18,atp.P.56.17,atp.val.2017,atp=TRUE,main="ATP 2018",
ylim.upper=0.61)
plot.path.score(5,d5.atp18,5,u5.atp18,atp.P.56.17,atp.val.2017,atp=TRUE,main="ATP 2018")
plot.path.state(5,d5.atp18,5,u5.atp18,main="ATP 2018")
d
u
# baseline with no activations
conduct.experiment(1:19,atp.P.123.14,atp.test.2014,atp=TRUE,test.year=0)$score
# deactivate 19
conduct.experiment(c(19),atp.P.567.18,atp.test.2018,atp=TRUE,test.year=0)$score
# activate 12
conduct.experiment((1:19)[-c(12)],atp.P.567.18,atp.test.2018,atp=TRUE,test.year=0)$score
# baseline with no activations
conduct.experiment(1:19,wta.P.567.18,wta.test.2018,atp=FALSE,test.year=0)$score
# deactivate 16
conduct.experiment(c(16),wta.P.567.18,wta.test.2018,atp=FALSE,test.year=0)$score
# activate 9
conduct.experiment((1:19)[-c(9)],wta.P.567.18,wta.test.2018,atp=FALSE,test.year=0)$score
# baseline with no activations
conduct.experiment(1:19,atp.P.567.18,atp.test.2018,atp=TRUE,test.year=0)$score
# deactivate 19
conduct.experiment(c(19),atp.P.567.18,atp.test.2018,atp=TRUE,test.year=0)$score
# activate 12
conduct.experiment((1:19)[-c(12)],atp.P.567.18,atp.test.2018,atp=TRUE,test.year=0)$score
